image: golang:latest
cache:
  paths:
    - main
stages:
  - test
  - build
  - deploy

format:
  stage: test
  script:
    - export GO111MODULE=on 
    - export GOPROXY=https://goproxy.cn,direct
    - go mod init hello
    - go mod tidy
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o main .
    - ls
    # - ehco $CI_PROJECT_DIR
  # artifacts:
  #   paths:
  #     - main

compile:
  variables:
    KANIKO_CACHE_ARGS: "--cache=true --cache-copy-layers=true --cache-ttl=24h"
    IMAGE_LABELS: >
      --label commit.sha=$CI_COMMIT_SHORT_SHA
    IMAGE_BUILD_ARGS: >
      -build-arg APPNAME=go-zero-greet
      --build-arg GOPROXY=https://proxy.golang.com.cn,direct
    CI_REGISTRY: https://index.docker.io
    CI_REGISTRY_USER: sxxpqp
    CI_REGISTRY_IMAGE: sxxpqp/gitlab-ci-go
    CI_REGISTRY_PASSWORD: Xl123456..
  stage: build
  image:
    # For latest releases see https://github.com/GoogleContainerTools/kaniko/releases
    # Only debug/*-debug versions of the Kaniko image are known to work within Gitlab CI
    name: sxxpqp/executor:debug
    entrypoint: [""]
  script:
    # if the user provide IMAGE_TAG then use it, else build the image tag using the default logic.
    # Default logic
    # Compose docker tag name
    # Git Branch/Tag to Docker Image Tag Mapping
    #   * Default Branch: main -> latest
    #   * Branch: feature/my-feature -> branch-feature-my-feature
    #   * Tag: v1.0.0/beta2 -> v1.0.0-beta2
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context dir:///${CI_PROJECT_DIR}
      --dockerfile ${CI_PROJECT_DIR}/Dockerfile 
      --destination "$CI_REGISTRY_IMAGE:$CI_PIPELINE_IID" $KANIKO_CACHE_ARGS $IMAGE_LABELS $IMAGE_BUILD_ARGS

  

deploy:
  stage: deploy
  script: echo "Define your deployment script!"
  environment: production
