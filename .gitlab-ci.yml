image: golang:latest

stages:
  - test
  - build
  - deploy

format:
  stage: test
  script:
    - export GO111MODULE=on 
    - export GOPROXY=https://goproxy.cn,direct
    - go mod init hello
    - go mod tidy
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o main .
    - ls
    # - ehco $CI_PROJECT_DIR
  # artifacts:
  #   paths:
  #     - main

compile:
  variables:
    # Additional options for Kaniko executor.
    # For more details see https://github.com/GoogleContainerTools/kaniko/blob/master/README.md#additional-flags
    KANIKO_ARGS: ""
    CI_REGISTRY: docker.io
    CI_REGISTRY_IMAGE: sxxpqp/gitlab-ci-go
    CI_REGISTRY_USER: sxxpqp
    CI_REGISTRY_PASSWORD: Xl123456..
    VERSION: latest
  stage: build
  image:
    # For latest releases see https://github.com/GoogleContainerTools/kaniko/releases
    # Only debug/*-debug versions of the Kaniko image are known to work within Gitlab CI
    name: sxxpqp/executor:debug
    entrypoint: [""]
  script:
    # if the user provide IMAGE_TAG then use it, else build the image tag using the default logic.
    # Default logic
    # Compose docker tag name
    # Git Branch/Tag to Docker Image Tag Mapping
    #   * Default Branch: main -> latest
    #   * Branch: feature/my-feature -> branch-feature-my-feature
    #   * Tag: v1.0.0/beta2 -> v1.0.0-beta2
    - export IMAGE_TAG=$CI_REGISTRY_IMAGE:$VERSION
    - echo $IMAGE_TAG
    - mkdir -p /kaniko/.docker
    - KANIKO_BUILD_CONTEXT=`pwd`
    - echo $KANIKO_BUILD_CONTEXT
    - ls
    # Write credentials to access Gitlab Container Registry within the runner/ci
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    # Build and push the container. To disable push add --no-push
    - cat /kaniko/.docker/config.json
    - DOCKERFILE_PATH=$KANIKO_BUILD_CONTEXT/Dockerfile
    - /kaniko/executor --context $KANIKO_BUILD_CONTEXT --dockerfile $DOCKERFILE_PATH --destination $IMAGE_TAG
  # Run this job in a branch/tag where a Dockerfile exists
  rules:
    - exists:
        - Dockerfile
    # custom Dockerfile path
    - if: $DOCKERFILE_PATH
    # custom build context without an explicit Dockerfile path
    - if: $KANIKO_BUILD_CONTEXT != $CI_PROJECT_DIR

  

deploy:
  stage: deploy
  script: echo "Define your deployment script!"
  environment: production
